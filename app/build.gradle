apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'io.fabric'
apply plugin: "com.alexleventer.slack"

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
    
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.android.nytimes"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 2
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug{
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
            ignoreFailures false
            testLogging {
                exceptionFormat "full"
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams true
                events "PASSED", "STARTED", "FAILED", "SKIPPED"
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) { //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "1f1d98cf48bded3cfc941e633bc8d8d3815f9c89"
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-27/android.jar," +
                "build/intermediates/classes/*"
        property "sonar.projectVersion", System.getenv("BUILD_NUMBER")
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        // first defines where the java files are, the second where the xml files are
        property "sonar.binaries", "build/intermediates/classes/*"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/*"
        property "sonar.java.libraries", libraries
        property "sonar.tests", "src/test/java" // where the tests are located
        property "sonar.java.test.binaries", "build/intermediates/classes/*"
        property "sonar.java.test.libraries", libraries
        property "sonar.scm.provider", "git"
        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.jacoco.reportPaths", "build/jacoco/testDebugUnitTest.exec, build/spoon/mock/debug/coverage/merged-coverage.ec"
        // path to coverage repor
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        // path to junit reports
        property "sonar.android.lint.report", "build/reports/*.xml"
        // path to lint reports
    }
}

// https://plugins.gradle.org/plugin/com.alexleventer.slack
slack {
    webhookUrl 'https://hooks.slack.com/services/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'
    shouldMonitor 'testDebug', 'assembleRelease', 'assembleDebug', 'publishApkRelease'
    username 'Gradle'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    
    // required if you want to use Mockito for unit tests
    testImplementation 'org.mockito:mockito-core:2.7.22'
    // required if you want to use Mockito for Android tests
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'
    
    // testImplementation 'com.nhaarman:mockito-kotlin-kt1.1:1.5.0'
    implementation "gradle.plugin.com.alexleventer.gradle:gradle-slack-plugin:1.0.4"
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    implementation ('com.squareup.retrofit2:converter-simplexml:2.2.0') {
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
        exclude group: 'xpp3', module: 'xpp3'
    }

    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation ('com.crashlytics.sdk.android:crashlytics:2.9.2@aar') {
        transitive = true;
    }
    
}
